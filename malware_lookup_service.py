import validators
import cherrypy
import redis
import sys
import time
from threading import Thread


class db_connection_manager(Thread):


    def __init__(self,host='localhost',port=6379):
        Thread.__init__(self)
        self.db_heartbeat_timer = 5
        self.db_handle = None
        self.connected_to_db = False
        self.redis_set = 'malware'
        self.db_handle = redis.Redis(host=host,
                                     port=port,
                                     db=0)

    def check_db_connection(self):
        try:
            import pdb
            #pdb.set_trace()
            print ("Check -----  -----")
            self.db_handle.ping()
            self.connected_to_db = True
        except (ConnectionRefusedError ,redis.exceptions.ConnectionError) as e:
            print (sys.exc_info()[0])
            print (sys.exc_info()[1])
            self.connected_to_db = False
            pass
        except Exception as e:
            print (sys.exc_info()[0])
            print (sys.exc_info()[1])
            self.connected_to_db = False
            pass

    def run(self):
        while (1):
            self.check_db_connection()
            time.sleep(self.db_heartbeat_timer)
                
@cherrypy.expose
class url_look_service(object):

    def __init__(self):
        self.db_mgr = db_connection_manager()
        self.db_mgr.start()

    def GET(self,*args,**kwargs):
        print ("ARGS  :", args, "Len :", len(args))
        if len(args) != 1 or not validators.url('http://' + args[0]):
            raise cherrypy.HTTPError(400, 'Invalid Request URL')

        url = args[0]
        if not self.db_mgr.connected_to_db:
            raise cherrypy.HTTPError(404, 'Service Currently Unavailable,Please try later ')
        else:
            if self.db_mgr.db_handle.sismember(self.db_mgr.redis_set, url):
               return  "malware:" + url
            return  "safe:" + url

    def POST(self, url=''):
        if not validators.url('http://' + url):
            raise cherrypy.HTTPError(400, 'Invalid Request URL')

        if not self.db_mgr.connected_to_db:
            raise cherrypy.HTTPError(404, 'Service Currently Unavailable,Please try later ')
        self.db_mgr.db_handle.sadd(self.db_mgr.redis_set, url)
        return  "added: " + url

    def DELETE(self,url=''):
        if not validators.url('http://' + url):
            raise cherrypy.HTTPError(400, 'Invalid URL')

        if not self.db_mgr.connected_to_db:
            raise cherrypy.HTTPError(404, 'Service Currently Unavailable,Please try later ')
        else:
            if not (self.db_mgr.db_handle.srem(self.db_mgr.redis_set, url)):
               raise cherrypy.HTTPError(400, 'Invalid Request ')
            return  "deleted: " + url


if __name__ == '__main__':
    conf = {
        '/': {
            'request.dispatch': cherrypy.dispatch.MethodDispatcher(),
            'tools.sessions.on': True,
            'tools.response_headers.on': True,
            'tools.response_headers.headers': [('Content-Type', 'text/plain')],
        }
    }
    #db_connection_manager().start()
    cherrypy.quickstart(url_look_service(), '/', conf)
